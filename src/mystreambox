#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import pprint
import time;
import signal;
from perlish import *

from SgtMatrixKBD import SgtMatrixKBD;
from SgtStationList import SgtStationList;
from mpd import (MPDClient, CommandError)
from socket import error as SocketError
from Adafruit_CharLCD import Adafruit_CharLCD

HOST = 'localhost'
PORT = '6600'
PASSWORD = False

##
CON_ID = {'host':HOST, 'port':PORT}
##  

verbose = False;

mpd = False;
lcd = False;

## Some functions
def mpdConnect(client, con_id):
    try:
        client.connect(**con_id)
    except SocketError:
        return False
    return True

def mpdAuth(client, secret):
    try:
        client.password(secret)
    except CommandError:
        return False
    return True

def mpdSetup():
    client = MPDClient()
    if mpdConnect(client, CON_ID):
        print('Got connected!')
    else:
        print('fail to connect MPD server.')
        return False
    # Auth if password is set non False
    if PASSWORD:
        if mpdAuth(client, PASSWORD):
            print('Pass auth!')
        else:
            print('Error trying to pass auth.')
            client.disconnect()
            return False

    return client;

def mpdStateDiff(st, pst):
    if(type(st) != type(pst)):
        print "mpdStateDiff type"
        return True;
    if(st['state'] != pst['state']):
        print "mpdStateDiff state"
        return True;

    if(('song' in st) != ('song' in pst)):
        print "mpdStateDiff songkey"
        return True;
    
    if('song' in st and 'song' in pst
       and st['song'] != pst['song']):
        print "mpdStateDiff song"
        return True;
        
    if(('songid' in st) != ('songid' in pst)):
        print "mpdStateDiff songid key"
        return True;

    if('songid' in st != 'songid' in pst
       and st['songid'] != pst['songid']):
        print "mpdStateDiff songid"
        return True

    else:
        return False

class SbStatus:
   def  __init__(self):
       self.restarting = 0;
       self.p_mstatus  = None;   # mpd.status() result
       self.mstatus  = None;   # mpd.status() result
       self.msong  = None;  # mpd.currentsong() result

   def update_from_mpd(self):
       self.p_mstatus = self.mstatus;
       self.mstatus = mpd.status();
       if(self.mstatus['state']== 'play'):
           self.msong = mpd.currentsong();
       else:
           self.msong = dict();

class SgtSBDisplay:
    def __init__(self, lcd, sbstat, sl):
        self.lcd = lcd;
        self.sl = sl;
        self.sbstat = sbstat;
        self.t_lastupdate = 0;
        self.verbose = False;
        self.prev_lcd_status = "";

    def signon(self):
        self.lcd.begin(40, 2)
        self.lcd.clear()
        self.lcd.message("telltronics streambox");

    def fail_message(self, s):
        self.lcd.setCursor(0, 0);  # col,row
        self.lcd.message(s);
        printf(s);
    
    def update(self):
        t_now = time.time();
        if(t_now - self.t_lastupdate > 5
           or mpdStateDiff(self.sbstat.mstatus, self.sbstat.p_mstatus)):
            self.draw_lcd_top();
            self.t_lastupdate = t_now;
    
    def draw_lcd_top(self):
        self.lcd.setCursor(0, 0);
        s = self.build_top_string();
        lcd.message(s);
    
    def build_top_string(self):
        nt = '';
        st = self.sbstat.mstatus;
        if('error' in st):
            nt = "ERR:"+st['error'];
        else:
            if(st['state'] == 'stop'):
                nt = '[stopped]';
            if(st['state'] == 'pause'):
                nt = '[pause]';
            elif(st['state']== 'play'):
                song = self.sbstat.msong;
                nt = '';
                if('name' in song):
                    nt += song['name'];
                if('title' in song):
                    nt += song['title'];
                if(len(nt) < 1):
                    nt = sprintf("%s:%s", song['id'], song['file']);
            
        s = sprintf("%-40.40s", nt);
        if(s != self.prev_lcd_status or self.verbose):
            printf("status:\"%s\"\n", s);
            self.prev_lcd_status = s;
        return s;

    def draw_lcd_bottom(self):
        self.lcd.setCursor(0, 1);
        for i in range(0, self.sl.length() ):
            self.lcd.message( sprintf("%4s ", self.sl.calli(i)) );
            if(i==3):
                self.lcd.message(" ");

def handle_buttons(keys, sbstat, disp):
    global mpd;
    state = sbstat.mstatus['state'];
    for k in keys:	# note each key event is a string
        if(k == 'P'):
            if('error' in sbstat.mstatus):
                printf("error state: trying pulse+mpd restart");
                disp.fail_message("restarting; stand by...  ");

                mpd.close();
                os.system("service mpd stop");
                os.system("service mpd start");
                mpd = mpdSetup();
                return;

            if(state != 'stop'):
                printf("poweroff\n");
                mpd.stop();
            else:
                printf("poweron.  todo: resume last stream\n");
                
        if(k >= '1' and k <= '8'):
            pst = int(k);
            printf("key %s; change to preset %d\n", k, pst-1);
            mpd.play(pst-1);

# signal handler
def clean_exit(signal, frame):
        printf("\nsig %s caught!\n", str(signal) );
        lcd.begin(40, 2)
        lcd.clear()
        lcd.message("streambox halted");
        sys.exit(0);


def main():
    global mpd;
    global lcd;
    sbstat = SbStatus();
    kb = SgtMatrixKBD();
    sl = SgtStationList();
    sl.initfixed();
    lcd = Adafruit_CharLCD(pin_rs=17,
                       pin_e=27,
                       pins_db=[22,10,9,11]);

    disp = SgtSBDisplay(lcd, sbstat, sl);
    disp.signon();
    
    signal.signal(signal.SIGINT, clean_exit);
    signal.signal(signal.SIGTERM, clean_exit);

    mpd = mpdSetup();
    if(not mpd):
        disp.fail_message("MPD connect failed.");
        sys.exit(1);
    mpd.consume(0);
    mpd.single(1);

    printf("connected");
    sl.mpdplaylist(mpd);
    sl.mpdchecklist(mpd);
    disp.draw_lcd_bottom();

    sbstat.update_from_mpd();

    disp.update();
    while(True):
        keys = kb.poll();
        if(len(keys)>0):
            handle_buttons(keys, sbstat, disp);

        sbstat.update_from_mpd();
        disp.update();


# Script starts here
if __name__ == "__main__":
    main()
